#Administer
def M(audio):
    print(audio)
    for line in audio.splitlines():
        text_to_speech = gTTS(text=audio, lang='en-ca')
        text_to_speech.save('voice.mp4')
        mixer.init()
        mixer.music.load("voice.mp4")
        mixer.music.play()


def myCommand():
    "listens for commands"
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print('Say something...')
        r.pause_threshold = 1
        r.adjust_for_ambient_noise(source, duration=1)
        audio = r.listen(source)
    try:
        command = r.recognize_google(audio).lower()
        print('You said: ' + command + '\n')
    #loop back to continue to listen for commands if unrecognizable speech is received
    except sr.UnknownValueError:
        print('....')
        command = myCommand();
    return command

#USUAL STUFF
def getDate():
    now = datetime.datetime.now()
    my_date = datetime.datetime.today()
    weekday = calendar.day_name[my_date.weekday()]  # e.g. Monday
    monthNum = now.month
    dayNum = now.day

    month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
                   'October', 'November', 'December']
    ordinalNumbers = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th', '11th', '12th',
                      '13th', '14th', '15th', '16th', '17th', '18th', '19th', '20th', '21st', '22nd', '23rd',
                      '24th', '25th', '26th', '27th', '28th', '29th', '30th', '31st']
    return 'Today is ' + weekday + ' ' + month_names[monthNum - 1] + ' the ' + ordinalNumbers[dayNum - 1] + '.'

def day(t:str)->bool:
    'spits a boolean value after checking whether today is the given day'
    if t==datetime.date.today().strftime("%A") or t==datetime.date.today().strftime("%A %I%p"):
        return True
    else: 
        return False
    return

def tym(s:str)->bool:
    'return a boolean value if the current time matches the given time'
    if s==datetime.date.today().strftime("%I %p"):
    
        return True
    else: 
        return False
    return
#Translator
def translate(command:str,text:str):
    'Translates the text to the command'
    glossary=googletrans.LANGUAGES
    glos=list(glossary)
    for p in glos:
        
        if googletrans.LANGUAGES[p]==command:
            translator=Translator()
            translated = translator.translate(text, src='en', dest=p)
        else:
            pass
    return M(translated.text)
#SEARCH MODULE
def search_web(command): 
    """Returns results on google for the given command"""

    chromedriver = '/Users/Kantemirovs/Desktop/chromedriver'
    driver = webdriver.Chrome(chromedriver) #chromedriver version: 79.0.3945.36
    driver.implicitly_wait(1) 
    driver.maximize_window() 
    M("Searching")
    driver.get("https://www.google.com/")
    search_bar = driver.find_element_by_name('q')
    button = driver.find_element_by_name('btnK')
    if 'google' in command: 
        command = command.replace('google',"")
        search_bar.send_keys(command)
        button.click()
    elif 'search' in command: 
        command = command.replace('search',"")
        search_bar.send_keys(command)
        button.click()
  
    else: 
        M('This is what I found')
        links=search(command)
        print(links)
        
    return

def search(st:str)-> list:
    
    try: 
        from googlesearch import search
        
    except ImportError:  
        print("No module named 'google' found") 

    results=[]
    if 'google' in st: 
        st = st.replace("google","") 
    elif 'search' in st:
        st=st.replace("search","")

    for j in search(st, tld="co.in", num=10, stop=3, pause=3): 
        results.append(j)
            
    return results

#Music
def play(command:str):
    """Takes the command and plays it on youtube"""
    
    chromedriver = '/Users/Kantemirovs/Desktop/chromedriver'
    driver = webdriver.Chrome(chromedriver)
    driver.implicitly_wait(1) 
    driver.maximize_window()  

    M("Opening in youtube") 
    indx = command.replace('play',"")  
    driver.get("https://www.youtube.com/results?search_query=" + indx)
    wait = WebDriverWait(driver, 3)
    presence = EC.presence_of_element_located
    visible = EC.visibility_of_element_located


        # play the video
    wait.until(visible((By.ID, "video-title")))
    driver.find_element_by_id("video-title").click()
    return










